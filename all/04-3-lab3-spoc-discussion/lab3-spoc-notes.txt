Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2015-04-01T12:28:46+08:00

====== lab3虚拟内存管理 ======
Created 星期三 01 四月 2015

===== 大致流程 =====
1. “合法”的虚拟内存
2. 中断处理-->page fault
3. 页置换算法：选择被换出的页，如何保存相关属性，适应页置换算法需求
4. 分配物理内存，完成对页表的修改
5. swap in/out

===== Clock页置换算法 =====
1. 如何判断内存中哪些是“常用”的页，哪些是“不常用”的页？
2. 何时进行替换操作？
3. *** 在把某页swap out写到磁盘的过程中，如果其他进程又访问了此页会如何？


===== 内存访问异常 =====

http://pdos.csail.mit.edu/6.828/2011/lec/x86_idt.pdf

以下为成功测试的异常种类：

1.	试图用一个超过段界限的偏移量访问段
	> * 触发：修改entry.S第44行SEG_ASM的第三个参数为0，这样一旦访问就肯定超段界限
	> * 效果：死机

2.	将一个不可执行的段装入CS寄存器
	> * 触发：在init.c中第44行后面加入
	```
	asm ("ljmp $7, $0x20");
	```
	> * 效果：Page Fault


3.	写只读段
	> * 触发：将pmm.c中的get_pte中的地址去掉PTE_W位
	> × 效果：不停reboot

4.	低优先级代码访问高优先级的段
	> * 触发：将pmm.c中的get_pte中的地址去掉PTE_U位
	> × 效果：……

5.	没有设置GDT/段不存在
	> * 触发：在pmm.c的gdt_init函数中，注释第132行
	> * 效果：不停reboot

6.	没有合法的TSS
	> * 触发：在pmm.c的gdt_init函数中，注释第129行
	> * 效果：不停reboot

7.	没有设置IDT
	> * 触发：在init.c中注释第36行
	> * 效果：不停reboot

8.	访问的是非法指令
	> * 在init.c中加入
	```
	asm ("jmp 0xffffffff");
	```
	> * 效果：不停reboot

9.	页目录项映射不存在
	> * 触发：在pmm.c的get_pte函数中返回NULL
	> * 效果：check错误

10.	页表项映射不存在
	> * 触发：在pmm.c的get_page函数中返回NULL
	> * 效果：不停reboot

11. 访问非法地址
	> * 触发：在vmm.c的check_pgfault函数中注释全部，加入
	```
    uint32_t addr = 0;
    *(uint32_t *)addr = 0;
    ```
    使访问一个非法地址
    > * 效果：显示Page Fault


